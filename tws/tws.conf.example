/*
 * Example TWS configuration file.
 */

# User/group to run as
user = "www"
group = "www"

# Number of processes to start.  If unset, this defaults to the number
# of CPUs in the system.  Using multiple processes can improve performance
# on SMP systems if the server is heavily loaded.  However, if most of
# your load is in CGI/FastCGI programs, you could set this to 1, since
# the additional processes will just take up memory.
#
# All configuration limits are specified per-process.  So, if you have
# 2 processes and want to limit TWS to 10,000 clients, set max-clients
# to 5000.
#nprocs = 2

# Set the open files limit at startup.  If TWS is started as root, this
# can be set to any value up to the OS limit.  Otherwise, it can't be
# raised above the hard limit.  Note that you need at least two files
# per client, and more for CGI requests.
nfiles = 1024

# Maximum number of clients that we can serve at once.  Setting this too
# low will cause client requests to be delayed unnecessarily, while 
# setting it too high will overload the system and cause resource
# starvation.  
max-clients = 10000

# Use sendfile() to improve static file performance.  Only available on
# FreeBSD.  Note: sendfile() performs poorly on FreeBSD (at least 8.0) when 
# using a ZFS filesystem.  It should be disabled in that situation.
use-sendfile = "yes"

# IP address to listen on; can specify several.
listen "0.0.0.0:80" {
	# Number of waiting connections to allow
	backlog = 64

	# Force a particular protocol
	protocol = ipv4
}

# Do reverse DNS lookups for clients.  This requires two DNS queries for
# every request, and can significantly reduce performance, as well as
# causing a lot of DNS load.
resolve-hostnames = no

# Client read/write timeout.  Also used for keep-alive requests.
timeout = 120

# The default content type.  If you don't set this, no Content-Type header will
# be sent for unknown types.  This is normally what you want, but if you have a
# lot of text files with funny extensions, you could set this to text/plain.
default-content-type = "text/plain"

# Where to load the list of MIME types from
mime-type-file = "/usr/local/etc/tws/mime.types"

# Name of the index file(s) to look for if a request is made for a directory.
index-file = {
	"index.html"
}

# Whether to compress content for clients which can support it. This can 
# significantly reduce bandwidth usage, but imposes some CPU overhead.  The 
# compression level should be between 1 (lowest) and 9 (highest); 6, the 
# default, is a reasonable compromise.  If you find TWS is using too much CPU, 
# try lowering it.  Set to 0 to disable compression.
compression-level = 6

# Whether to compress the output from CGI scripts.  Note that if the
# CGI script sends a Content-Encoding header, TWS will not compress
# the output even if this is enabled.
compress-cgi = yes

# MIME types to compress.  Generally, text data compresses well, while
# compressing image data is a waste of CPU.
compress-types = {
	"text/*",
	"application/*+xml"
}

# Any number of virtual hosts can be defined.  If none matches the client
# request, _default_ will be served.  If _default_ is not defined, the client
# will receive an error message.

virtualhost "_default_" {
	# Other names that refer to this host
	aliases = {
		"ilythia.tcx.org.uk"
	}

	# Root directory
	docroot = "/var/www"

	# Enable per-user document directories.  This allows 
	# /~username/index.html to refer to, for example,
	# /home/username/public_html/index.html.
	userdir {
		prefix = "/~"	# or prefix = "/users/", etc.
		dir = public_html
	}

	# CGI programs.  There are two ways to run CGIs: either define a
	# particular directory as being a CGI directory, in which case all files
	# in that directory are considered CGIs, or define one or more MIME
	# types to be executed as CGI programs. 
	
	cgi {
		# Always treat these MIME types as CGI
		mime-types = {
			"application/x-cgi"
		}

		# Or define some CGI directories.  These do not need to be
		# inside the document root, but must be reachable somehow.
		cgi-bin = {
			"/var/www/cgi-bin"
		}
	}

	# Force a CGI program to be executed with a particular interpreter.  
	# This is mostly useful for PHP.  
	#
	# NOTE: To use the PHP CGI executable as an interpreter, you must set 
	# cgi.force_redirect=0 in php.ini.  If you do that, it is no longer 
	# safe to place the PHP CGI in the document root.  See 
	# <http://uk2.php.net/manual/en/security.cgi-bin.attacks.php> for more 
	# information.
	interpreter "/usr/local/bin/php-cgi" {
		mime-types = {
			"application/x-php"
		}

		# Use FastCGI for the interpreter.  For PHP, make sure
		# PHP was built with FastCGI enabled.
		protocol = fastcgi
	}

	suexec {
		# Normally, CGI scripts are executed as the web server
		# user.  suexec allows them to run as the owner of the
		# file instead.
		#
		# Note that since suexec requires the use of a setuid-root
		# wrapper script to start CGIs, a vulnerability in that
		# script, while unlikely, could lead to root compromise.
		#
		# On the other hand, if you have local users (using userdir),
		# not using suexec means they can interfere with each
		# others' processes, read database passwords, etc.
		enable = yes

		# Note that when suexec is combined with the "interpreter"
		# feature, a separate version of suexec will be used, called
		# suexec_weak.  This imposes fewer restrictions on the
		# executable than suexec does, and is required for executing
		# arbitrary script interpreters.
		#
		# However, unlike the normal suexec which will only run scripts
		# in the document root or a userdir, suexec_weak allows anyone
		# with access to the web server uid to run any program as any 
		# (non-root) user on the system.  This is necessary to let it
		# start interpreters in e.g. /usr/local/bin.
		#
		# Both suexec and suexec_weak need to be setuid to work, but for
		# security reasons, are not installed that way.  Enable them
		# like this:
		#
		#   # chmod u+s /usr/local/libexec/tws/suexec
		#   # chmod u+s /usr/local/libexec/tws/suexec_weak
	}

	# Some global options can be defined for virtual hosts as well
	default-content-type = "text/plain"
	index-file = { "index.html", "index.php" }
}
